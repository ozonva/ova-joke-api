// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_joke_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JokeServiceClient is the client API for JokeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JokeServiceClient interface {
	// CreateJokeV1 create new joke entity.
	CreateJokeV1(ctx context.Context, in *CreateJokeRequestV1, opts ...grpc.CallOption) (*CreateJokeResponseV1, error)
	// DescribeJokeV1 show full information about Joke entity.
	DescribeJokeV1(ctx context.Context, in *DescribeJokeRequestV1, opts ...grpc.CallOption) (*DescribeJokeResponseV1, error)
	// ListJokeV1 show list of jokes.
	ListJokeV1(ctx context.Context, in *ListJokeRequestV1, opts ...grpc.CallOption) (*ListJokeResponseV1, error)
	// RemoveJokeV1 delete joke from storage.
	RemoveJokeV1(ctx context.Context, in *RemoveJokeRequestV1, opts ...grpc.CallOption) (*RemoveJokeResponseV1, error)
}

type jokeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJokeServiceClient(cc grpc.ClientConnInterface) JokeServiceClient {
	return &jokeServiceClient{cc}
}

func (c *jokeServiceClient) CreateJokeV1(ctx context.Context, in *CreateJokeRequestV1, opts ...grpc.CallOption) (*CreateJokeResponseV1, error) {
	out := new(CreateJokeResponseV1)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/CreateJokeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokeServiceClient) DescribeJokeV1(ctx context.Context, in *DescribeJokeRequestV1, opts ...grpc.CallOption) (*DescribeJokeResponseV1, error) {
	out := new(DescribeJokeResponseV1)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/DescribeJokeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokeServiceClient) ListJokeV1(ctx context.Context, in *ListJokeRequestV1, opts ...grpc.CallOption) (*ListJokeResponseV1, error) {
	out := new(ListJokeResponseV1)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/ListJokeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokeServiceClient) RemoveJokeV1(ctx context.Context, in *RemoveJokeRequestV1, opts ...grpc.CallOption) (*RemoveJokeResponseV1, error) {
	out := new(RemoveJokeResponseV1)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/RemoveJokeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JokeServiceServer is the server API for JokeService service.
// All implementations must embed UnimplementedJokeServiceServer
// for forward compatibility
type JokeServiceServer interface {
	// CreateJokeV1 create new joke entity.
	CreateJokeV1(context.Context, *CreateJokeRequestV1) (*CreateJokeResponseV1, error)
	// DescribeJokeV1 show full information about Joke entity.
	DescribeJokeV1(context.Context, *DescribeJokeRequestV1) (*DescribeJokeResponseV1, error)
	// ListJokeV1 show list of jokes.
	ListJokeV1(context.Context, *ListJokeRequestV1) (*ListJokeResponseV1, error)
	// RemoveJokeV1 delete joke from storage.
	RemoveJokeV1(context.Context, *RemoveJokeRequestV1) (*RemoveJokeResponseV1, error)
	mustEmbedUnimplementedJokeServiceServer()
}

// UnimplementedJokeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJokeServiceServer struct {
}

func (UnimplementedJokeServiceServer) CreateJokeV1(context.Context, *CreateJokeRequestV1) (*CreateJokeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJokeV1 not implemented")
}
func (UnimplementedJokeServiceServer) DescribeJokeV1(context.Context, *DescribeJokeRequestV1) (*DescribeJokeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeJokeV1 not implemented")
}
func (UnimplementedJokeServiceServer) ListJokeV1(context.Context, *ListJokeRequestV1) (*ListJokeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJokeV1 not implemented")
}
func (UnimplementedJokeServiceServer) RemoveJokeV1(context.Context, *RemoveJokeRequestV1) (*RemoveJokeResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJokeV1 not implemented")
}
func (UnimplementedJokeServiceServer) mustEmbedUnimplementedJokeServiceServer() {}

// UnsafeJokeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JokeServiceServer will
// result in compilation errors.
type UnsafeJokeServiceServer interface {
	mustEmbedUnimplementedJokeServiceServer()
}

func RegisterJokeServiceServer(s grpc.ServiceRegistrar, srv JokeServiceServer) {
	s.RegisterService(&JokeService_ServiceDesc, srv)
}

func _JokeService_CreateJokeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJokeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).CreateJokeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/CreateJokeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).CreateJokeV1(ctx, req.(*CreateJokeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokeService_DescribeJokeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeJokeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).DescribeJokeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/DescribeJokeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).DescribeJokeV1(ctx, req.(*DescribeJokeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokeService_ListJokeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJokeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).ListJokeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/ListJokeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).ListJokeV1(ctx, req.(*ListJokeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokeService_RemoveJokeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveJokeRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).RemoveJokeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/RemoveJokeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).RemoveJokeV1(ctx, req.(*RemoveJokeRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// JokeService_ServiceDesc is the grpc.ServiceDesc for JokeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JokeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonva.ova_joke_api.JokeService",
	HandlerType: (*JokeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJokeV1",
			Handler:    _JokeService_CreateJokeV1_Handler,
		},
		{
			MethodName: "DescribeJokeV1",
			Handler:    _JokeService_DescribeJokeV1_Handler,
		},
		{
			MethodName: "ListJokeV1",
			Handler:    _JokeService_ListJokeV1_Handler,
		},
		{
			MethodName: "RemoveJokeV1",
			Handler:    _JokeService_RemoveJokeV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ova-joke-api/ova-joke-api.proto",
}
