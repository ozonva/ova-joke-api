// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_joke_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JokeServiceClient is the client API for JokeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JokeServiceClient interface {
	// CreateJoke create new joke entity.
	CreateJoke(ctx context.Context, in *CreateJokeRequest, opts ...grpc.CallOption) (*CreateJokeResponse, error)
	// DescribeJoke show full information about Joke entity.
	DescribeJoke(ctx context.Context, in *DescribeJokeRequest, opts ...grpc.CallOption) (*DescribeJokeResponse, error)
	// ListJoke show list of jokes.
	ListJoke(ctx context.Context, in *ListJokeRequest, opts ...grpc.CallOption) (*ListJokeResponse, error)
	// RemoveJoke delete joke from storage.
	RemoveJoke(ctx context.Context, in *RemoveJokeRequest, opts ...grpc.CallOption) (*RemoveJokeResponse, error)
}

type jokeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJokeServiceClient(cc grpc.ClientConnInterface) JokeServiceClient {
	return &jokeServiceClient{cc}
}

func (c *jokeServiceClient) CreateJoke(ctx context.Context, in *CreateJokeRequest, opts ...grpc.CallOption) (*CreateJokeResponse, error) {
	out := new(CreateJokeResponse)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/CreateJoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokeServiceClient) DescribeJoke(ctx context.Context, in *DescribeJokeRequest, opts ...grpc.CallOption) (*DescribeJokeResponse, error) {
	out := new(DescribeJokeResponse)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/DescribeJoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokeServiceClient) ListJoke(ctx context.Context, in *ListJokeRequest, opts ...grpc.CallOption) (*ListJokeResponse, error) {
	out := new(ListJokeResponse)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/ListJoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jokeServiceClient) RemoveJoke(ctx context.Context, in *RemoveJokeRequest, opts ...grpc.CallOption) (*RemoveJokeResponse, error) {
	out := new(RemoveJokeResponse)
	err := c.cc.Invoke(ctx, "/ozonva.ova_joke_api.JokeService/RemoveJoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JokeServiceServer is the server API for JokeService service.
// All implementations must embed UnimplementedJokeServiceServer
// for forward compatibility
type JokeServiceServer interface {
	// CreateJoke create new joke entity.
	CreateJoke(context.Context, *CreateJokeRequest) (*CreateJokeResponse, error)
	// DescribeJoke show full information about Joke entity.
	DescribeJoke(context.Context, *DescribeJokeRequest) (*DescribeJokeResponse, error)
	// ListJoke show list of jokes.
	ListJoke(context.Context, *ListJokeRequest) (*ListJokeResponse, error)
	// RemoveJoke delete joke from storage.
	RemoveJoke(context.Context, *RemoveJokeRequest) (*RemoveJokeResponse, error)
	mustEmbedUnimplementedJokeServiceServer()
}

// UnimplementedJokeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJokeServiceServer struct {
}

func (UnimplementedJokeServiceServer) CreateJoke(context.Context, *CreateJokeRequest) (*CreateJokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJoke not implemented")
}
func (UnimplementedJokeServiceServer) DescribeJoke(context.Context, *DescribeJokeRequest) (*DescribeJokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeJoke not implemented")
}
func (UnimplementedJokeServiceServer) ListJoke(context.Context, *ListJokeRequest) (*ListJokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJoke not implemented")
}
func (UnimplementedJokeServiceServer) RemoveJoke(context.Context, *RemoveJokeRequest) (*RemoveJokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJoke not implemented")
}
func (UnimplementedJokeServiceServer) mustEmbedUnimplementedJokeServiceServer() {}

// UnsafeJokeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JokeServiceServer will
// result in compilation errors.
type UnsafeJokeServiceServer interface {
	mustEmbedUnimplementedJokeServiceServer()
}

func RegisterJokeServiceServer(s grpc.ServiceRegistrar, srv JokeServiceServer) {
	s.RegisterService(&JokeService_ServiceDesc, srv)
}

func _JokeService_CreateJoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).CreateJoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/CreateJoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).CreateJoke(ctx, req.(*CreateJokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokeService_DescribeJoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeJokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).DescribeJoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/DescribeJoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).DescribeJoke(ctx, req.(*DescribeJokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokeService_ListJoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).ListJoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/ListJoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).ListJoke(ctx, req.(*ListJokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JokeService_RemoveJoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveJokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JokeServiceServer).RemoveJoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonva.ova_joke_api.JokeService/RemoveJoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JokeServiceServer).RemoveJoke(ctx, req.(*RemoveJokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JokeService_ServiceDesc is the grpc.ServiceDesc for JokeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JokeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonva.ova_joke_api.JokeService",
	HandlerType: (*JokeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJoke",
			Handler:    _JokeService_CreateJoke_Handler,
		},
		{
			MethodName: "DescribeJoke",
			Handler:    _JokeService_DescribeJoke_Handler,
		},
		{
			MethodName: "ListJoke",
			Handler:    _JokeService_ListJoke_Handler,
		},
		{
			MethodName: "RemoveJoke",
			Handler:    _JokeService_RemoveJoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ova-joke-api/ova-joke-api.proto",
}
