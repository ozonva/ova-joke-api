// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_ova_joke_api is a generated GoMock package.
package mock_ova_joke_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozonva/ova-joke-api/internal/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddJokes mocks base method.
func (m *MockRepo) AddJokes(entities []models.Joke) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJokes", entities)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJokes indicates an expected call of AddJokes.
func (mr *MockRepoMockRecorder) AddJokes(entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJokes", reflect.TypeOf((*MockRepo)(nil).AddJokes), entities)
}

// DescribeJoke mocks base method.
func (m *MockRepo) DescribeJoke(jokeID models.JokeID) (*models.Joke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeJoke", jokeID)
	ret0, _ := ret[0].(*models.Joke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeJoke indicates an expected call of DescribeJoke.
func (mr *MockRepoMockRecorder) DescribeJoke(jokeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeJoke", reflect.TypeOf((*MockRepo)(nil).DescribeJoke), jokeID)
}

// ListJokes mocks base method.
func (m *MockRepo) ListJokes(limit, offset uint64) ([]models.Joke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJokes", limit, offset)
	ret0, _ := ret[0].([]models.Joke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJokes indicates an expected call of ListJokes.
func (mr *MockRepoMockRecorder) ListJokes(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJokes", reflect.TypeOf((*MockRepo)(nil).ListJokes), limit, offset)
}

// RemoveJoke mocks base method.
func (m *MockRepo) RemoveJoke(jokeID models.JokeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJoke", jokeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJoke indicates an expected call of RemoveJoke.
func (mr *MockRepoMockRecorder) RemoveJoke(jokeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJoke", reflect.TypeOf((*MockRepo)(nil).RemoveJoke), jokeID)
}
